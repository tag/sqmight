#task :default => [ :clean, :fresh_scriptaculous, :package ]

# task :clean do
#   rm_rf PKG_DESTINATION
# end

#task :default => [ :jslint ]
task :default => [ :md ]


# task :build => [ :basics_production ]
# task :test => [ :basics_test ]
# task :dev => [ :basics_dev


dir = { :source  => '.',
        :publish => 'publish',
        :js      => 'js',
      }
dir[:js_lib]      = File.join(dir[:js],     'lib')
dir[:dev]         = File.join(dir[:source], 'dev')
dir[:build]       = File.join(dir[:source], 'build')
dir[:build_tools] = File.join(dir[:build],  'tools')
dir[:build_templates] = File.join(dir[:build],  'templates')

#http://www.jslint.com/lint.html
opt = {}
opt[:jslint] = 'maxerr=25,evil=true,browser=true,eqeqeq=true,immed=true,newcap=true,nomen=true,es5=true,rhino=true,undef=true,white=false'

summary = []

desc "Run jslint on dev js files"
task :jslint do #=> :summary
  fl = FileList.new(File.join( dir[:dev], dir[:js], '**', '*.js'))
  fl.exclude('*.min.js.');
  fl.exclude(File.join(dir[:dev], dir[:js_lib]))
  fl.each {|file|
    puts "== jslint on #{file}"
    sh "java -jar #{File.join(dir[:build_tools], 'rhino.jar')} #{File.join(dir[:build_tools], 'fulljslint.js')} #{file} #{opt[:jslint]}" do |ok, res|
      if !ok
        summary.push "jslint: Errors found in #{file}"
      end
    end
  }
end

# task :summary do
#   puts 'SUMMARY'
#   summary.each {|s| puts s}
# end

desc "Searches code files for TODOs, appends to TODO file"
task :todo do
  todo = File.join(dir[:source],'TODO')
  content = File.read(todo)
  content.gsub!(/\nAUTO(-GENERATED)?\n-+\n.*/m, "\n")

  puts content
  File.open(todo, 'w') do |f|
    f.puts content, "AUTO-GENERATED\n--------------\n"

    fl = FileList.new(File.join( dir[:dev], '**', '*.{js,php,rb,bash}'))
    fl.exclude('*.min.js.')
    fl.exclude(File.join(dir[:dev], dir[:js_lib]))
    fl.include(File.join(dir[:source], '*.{js,php,rb,bash}'))

    fl.include(File.join(dir[:source], 'app','**','*.{js,php,rb,bash}'))

    pattern = /(\/\/|#)\s*TODO:?\s+(.+)$/
    fl.each do |file|
      File.open(file) do |grep_file|
        grep_file.each do |line|
          f.puts "+ #{$2} (#{file}:#{grep_file.lineno.to_s})" if pattern.match(line)
        end
      end
    end
  end
end

# jshint
# csslint
# build => -build.production
# -build.production => ["-rev,
#                      -usemin,
#                      -js.all.minify,
#                      -js.main.concat,
#                      -js.mylibs.concat,
#                      -js.scripts.concat,
#                      -css,
#                      -manifest,
#                      -htmlclean,
#                      -imagespng,
#                      -imagesjpg,
#                      -copy]
                     
 # minify => -minify.production

# namespace :js
#   task :minify_prototype do
#   end
# end

# namespace :md
#   require 'rubygems'
#   require 'redcarpet'
#   markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML,
#       :autolink => true, :strikethrough => true)
# 

#   rule ".html" => [".markdown", ".md"] do |t|
MD = FileList[File.join( dir[:dev], '*.{md,markdown}')]
HTML = MD.ext('html')
# 
# #rule File.join(dir[:dev], 'about.html') => [File.join(dir[:dev], 'about.md')] do |t|
#rule HTML => MD do
rule File.join( dir[:dev], 'about.html') => File.join( dir[:dev], 'about.md') do |t|
  puts "#{t.source} RULE"
  mdfile_to_html t.source, File.join(dir[:build_templates] , "base.html.erb")
# #    sh "markdown #{t.source} > #{t.name}"
end

desc "markdown"
task :md => [File.join( dir[:dev], 'about.html').to_s] do |t|
  # puts "#{t.source} to md"
  # file_to_html File.join( dir[:dev], 'about.md')
end
#   
#   task :all do
#     
#   end
# end

require "erb"
require "rubygems"
#require "rdiscount"
require 'redcarpet'

def mdfile_to_html(file, template_file)
	basename = File.basename(file, ".md")
#	template_file = 
	output_file = File.join(File.dirname(file), "#{basename}.html")
	
	begin
		@template = nil
		pre_body = ERB.new(File.open(file).read).result
#		@body = RDiscount.new(pre_body).to_html
    markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML,
       :autolink => true, :strikethrough => true)
    @body = markdown.render(pre_body)

		if @template # may be defined in .md file.
			template_file = @template
		end
		
		if File.exists? template_file
			template = File.open(template_file).read
		else
			template = %q{
	<html>
		<head></head>
		<body>
			<%= @body %>
		</body>
	</html>
}
      puts 'OOPS'
      # TODO: ERROR if template not found
		end
		
		File.open(output_file, "w") do |f|
      f.write "<!-- AUTO GENERATED by rake task. DO NOT MODIFY -->"
			f.write ERB.new(template).result
		end
    puts "#{file} => #{output_file}"
	rescue => e
		puts "Error while working with file \"#{file}\":"
		puts " - #{e.message}"
	end
end
